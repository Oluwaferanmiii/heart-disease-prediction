# -*- coding: utf-8 -*-
"""heart_GUI_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AiSkt3a15lnBjOKwLdsMWqhFrsB6BmFY
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from joblib import dump, load
import sqlite3
import tkinter as tk
from tkinter import messagebox

# Load the dataset
data = pd.read_csv('heart.csv')

# Preprocess the dataset: Remove rows with missing values
data = data.dropna()

# Independent features (X) and dependent feature (y)
X = data.drop(columns=['target'])
y = data['target']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train the model
model = RandomForestClassifier(random_state=42)
model.fit(X_train_scaled, y_train)

# Evaluate the model
y_pred = model.predict(X_test_scaled)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred))
print("Recall:", recall_score(y_test, y_pred))
print("F1 Score:", f1_score(y_test, y_pred))

dump(model, 'heart_disease_model.joblib')
dump(scaler, 'scaler.joblib')

# Set up SQLite database
conn = sqlite3.connect('heart_disease.db')
c = conn.cursor()
c.execute('''
    CREATE TABLE IF NOT EXISTS predictions (
        id INTEGER PRIMARY KEY,
        age REAL,
        sex INTEGER,
        cp INTEGER,
        trestbps REAL,
        chol REAL,
        fbs INTEGER,
        restecg INTEGER,
        thalach REAL,
        exang INTEGER,
        oldpeak REAL,
        slope INTEGER,
        ca REAL,
        thal INTEGER,
        prediction INTEGER
    )
''')
conn.commit()
conn.close()

# Function to predict heart disease
def predict_heart_disease(features):
    model = load('heart_disease_model.joblib')
    scaler = load('scaler.joblib')
    features_scaled = scaler.transform([features])
    prediction = model.predict([features_scaled[0]])
    return prediction

# GUI application using Tkinter
class HeartDiseaseApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Heart Disease Prediction")

        # Create labels and entries for input features
        tk.Label(root, text="Age").grid(row=0)
        tk.Label(root, text="Sex").grid(row=1)
        tk.Label(root,text="Chest Pain Type (cp)").grid(row=2)
        tk.Label(root, text="Resting Blood Pressure (trestbps)").grid(row=3)
        tk.Label(root, text="Cholesterol (chol)").grid(row=4)
        tk.Label(root, text="Fasting Blood Sugar (fbs)").grid(row=5)
        tk.Label(root, text="Resting ECG (restecg)").grid(row=6)
        tk.Label(root, text="Max Heart Rate (thalach)").grid(row=7)
        tk.Label(root, text="Exercise Induced Angina (exang)").grid(row=8)
        tk.Label(root, text="ST Depression (oldpeak)").grid(row=9)
        tk.Label(root, text="Slope of Peak Exercise ST Segment (slope)").grid(row=10)
        tk.Label(root, text="Number of Major Vessels (ca)").grid(row=11)
        tk.Label(root, text="Thalassemia (thal)").grid(row=12)

        self.age = tk.Entry(root)
        self.sex = tk.Entry(root)
        self.cp = tk.Entry(root)
        self.trestbps = tk.Entry(root)
        self.chol = tk.Entry(root)
        self.fbs = tk.Entry(root)
        self.restecg = tk.Entry(root)
        self.thalach = tk.Entry(root)
        self.exang = tk.Entry(root)
        self.oldpeak = tk.Entry(root)
        self.slope = tk.Entry(root)
        self.ca = tk.Entry(root)
        self.thal = tk.Entry(root)

        self.age.grid(row=0, column=1)
        self.sex.grid(row=1, column=1)
        self.cp.grid(row=2, column=1)
        self.trestbps.grid(row=3, column=1)
        self.chol.grid(row=4, column=1)
        self.fbs.grid(row=5, column=1)
        self.restecg.grid(row=6, column=1)
        self.thalach.grid(row=7, column=1)
        self.exang.grid(row=8, column=1)
        self.oldpeak.grid(row=9, column=1)
        self.slope.grid(row=10, column=1)
        self.ca.grid(row=11, column=1)
        self.thal.grid(row=12, column=1)

        # Prediction button
        tk.Button(root, text='Predict', command=self.make_prediction).grid(row=13, column=1, pady=4)

    def create_input_field(self, label_text, row):
        label = tk.Label(self.root, text=label_text)
        label.grid(row=row, column=0, pady=5, padx=5, sticky=tk.W)
        entry = tk.Entry(self.root)
        entry.grid(row=row, column=1, pady=5, padx=5)
        setattr(self, label_text.replace(" ", "_").lower(), entry)

    def make_prediction(self):
        try:
            features = [
                float(self.age.get()), int(self.sex.get()), int(self.cp.get()), float(self.trestbps.get()),
                float(self.chol.get()), int(self.fbs.get()), int(self.restecg.get()), float(self.thalach.get()),
                int(self.exang.get()), float(self.oldpeak.get()), int(self.slope.get()), float(self.ca.get()), int(self.thal.get())
            ]
            prediction = predict_heart_disease(features)
            messagebox.showinfo("Prediction Result", f"Prediction: {'Heart Disease' if prediction == 1 else 'No Heart Disease'}")
            self.save_prediction_to_db(features, prediction)
        except Exception as e:
            messagebox.showerror("Error", f"Error in prediction: {e}")

    def save_prediction_to_db(self, features, prediction):
        conn = sqlite3.connect('heart_disease.db')
        c = conn.cursor()
        c.execute('''
            INSERT INTO predictions (age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal, prediction)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (*features, prediction))
        conn.commit()
        conn.close()

if __name__ == "__main__":
    root = tk.Tk()
    app = HeartDiseaseApp(root)
    root.mainloop()